apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: ec2-role-composition
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  compositeTypeRef:
    apiVersion: aws.platform.io/v1alpha1
    kind: XEC2Role
  mode: Pipeline
  pipeline:
  - step: patch-and-transform
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      - name: s3-access-role
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: Role
          spec:
            forProvider:
              assumeRolePolicy: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                }
              description: "IAM role for EC2 instances created by Crossplane"
            providerConfigRef:
              name: default
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.roleName  
          toFieldPath: metadata.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.bucketName  
          toFieldPath: spec.forProvider.tags.BucketAccess
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
      
      - name: s3-access-policy
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: Policy
          spec:
            forProvider:
              description: "S3 access policy for Crossplane managed role"
            providerConfigRef:
              name: default
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.bucketName  
          toFieldPath: spec.forProvider.policy
          transforms:
          - type: string
            string:
              type: Format
              fmt: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject",
                                "s3:ListBucket"
                            ],
                            "Resource": [
                                "arn:aws:s3:::%s",
                                "arn:aws:s3:::%s/*"
                            ]
                        }
                    ]
                }
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.roleName  
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-s3-policy"
      
      - name: role-policy-attachment
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          spec:
            forProvider:
              roleSelector:
                matchControllerRef: true
              policyArnSelector:
                matchControllerRef: true
            providerConfigRef:
              name: default

      - name: instance-profile
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: InstanceProfile
          spec:
            forProvider:
              roleSelector:
                matchControllerRef: true
            providerConfigRef:
              name: default
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.roleName  
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-instance-profile"
      
      # Security Group
      - name: web-security-group
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroup
          spec:
            forProvider:
              description: "Web security group"
            providerConfigRef:
              name: default
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.roleName
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-web-sg"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region

      # Ingress Rules
      - name: sg-rule-http
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroupRule
          spec:
            forProvider:
              type: "ingress"
              fromPort: 80
              toPort: 80
              protocol: "tcp"
              cidrBlocks: ["0.0.0.0/0"]
              securityGroupIdSelector:
                matchControllerRef: true
            providerConfigRef:
              name: default
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region

      - name: sg-rule-ssh
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroupRule
          spec:
            forProvider:
              type: "ingress"
              fromPort: 22
              toPort: 22
              protocol: "tcp"
              cidrBlocks: ["0.0.0.0/0"]
              securityGroupIdSelector:
                matchControllerRef: true
            providerConfigRef:
              name: default
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region

      # Egress Rule
      - name: sg-rule-egress-all
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroupRule
          spec:
            forProvider:
              type: "egress"
              fromPort: 0
              toPort: 0
              protocol: "-1"
              cidrBlocks: ["0.0.0.0/0"]
              securityGroupIdSelector:
                matchControllerRef: true
            providerConfigRef:
              name: default
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region

      - name: s3-bucket
        base:
          apiVersion: s3.aws.upbound.io/v1beta2
          kind: Bucket
          spec:
            forProvider:
              region: us-east-1
            providerConfigRef:
              name: default
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.bucketName
          toFieldPath: metadata.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region

      - name: ec2-instance
        base:
          apiVersion: ec2.aws.upbound.io/v1beta2
          kind: Instance
          spec:
            forProvider:
              ami: ami-06c3254d99b7c0139
              instanceType: t3.micro
              region: us-east-1
              securityGroupSelector:
                matchControllerRef: true
            providerConfigRef:
              name: default
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.ec2.instanceName
          toFieldPath: metadata.name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.ec2.amiId
          toFieldPath: spec.forProvider.ami
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.ec2.instanceType
          toFieldPath: spec.forProvider.instanceType
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath 
          fromFieldPath: spec.parameters.ec2.keyName
          toFieldPath: spec.forProvider.keyName
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.bucketName
          toFieldPath: spec.forProvider.userData
          transforms:
          - type: string
            string:
              type: Format
              fmt: |
                #!/bin/bash
                yum update -y
                yum install -y httpd
                systemctl start httpd
                systemctl enable httpd
                
                cat > /usr/local/bin/sync-web.sh << 'EOF'
                #!/bin/bash
                aws s3 sync s3://%s/web/ /var/www/html/ --region us-east-1
                EOF
                chmod +x /usr/local/bin/sync-web.sh
                
                /usr/local/bin/sync-web.sh
                
                echo "*/5 * * * * root /usr/local/bin/sync-web.sh" >> /etc/crontab
                
                if [ ! -f /var/www/html/index.html ]; then
                  cat > /var/www/html/index.html << 'HTMLEOF'
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Mi Servidor Web con Crossplane</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 40px; }
                        .container { max-width: 800px; margin: 0 auto; }
                        .header { background: #f4f4f4; padding: 20px; border-radius: 5px; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="header">
                            <h1>ðŸš€ Â¡Servidor Web Funcionando!</h1>
                            <p>Esta pÃ¡gina web estÃ¡ servida desde un EC2 creado con Crossplane</p>
                            <p>Los archivos se sincronizan desde S3: %s</p>
                        </div>
                        <h2>InformaciÃ³n del Sistema:</h2>
                        <p>Bucket S3: %s</p>
                    </div>
                </body>
                </html>
                HTMLEOF
                fi
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.roleName
          toFieldPath: spec.forProvider.iamInstanceProfile
          transforms:
          - type: string
            string:
              type: Format
              fmt: "%s-instance-profile"