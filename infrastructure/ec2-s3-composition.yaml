apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: ec2-s3-composition
spec:
  compositeTypeRef:
    apiVersion: platform.example.com/v1alpha1
    kind: XEC2S3Resource
  mode: Pipeline
  pipeline:
  - step: patch-and-transform
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      # S3 Bucket
      - name: s3-bucket
        base:
          apiVersion: s3.aws.upbound.io/v1beta1
          kind: Bucket
          spec:
            forProvider:
              region: us-east-1
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.bucketName
          toFieldPath: metadata.name

      # Security Group
      - name: web-security-group
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroup
          spec:
            forProvider:
              description: "Web security group"
              ingress:
              - fromPort: 80
                toPort: 80
                protocol: tcp
                cidrBlocks: ["0.0.0.0/0"]
              - fromPort: 22
                toPort: 22
                protocol: tcp
                cidrBlocks: ["0.0.0.0/0"]
              egress:
              - fromPort: 0
                toPort: 0
                protocol: "-1"
                cidrBlocks: ["0.0.0.0/0"]
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region

      # IAM Role
      - name: ec2-iam-role
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: Role
          spec:
            forProvider:
              assumeRolePolicy: |
                {
                  "Version": "2012-10-17",
                  "Statement": [{
                    "Action": "sts:AssumeRole",
                    "Effect": "Allow",
                    "Principal": {"Service": "ec2.amazonaws.com"}
                  }]
                }

      # Policy Attachment
      - name: s3-policy-attachment
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          spec:
            forProvider:
              policyArn: "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
              roleSelector:
                matchControllerRef: true

      # Instance Profile
      - name: ec2-instance-profile
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: InstanceProfile
          spec:
            forProvider:
              roleSelector:
                matchControllerRef: true

      # EC2 Instance
      - name: ec2-instance
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: Instance
          spec:
            forProvider:
              instanceType: t3.micro
              ami: ami-0c02fb55956c7d316
              region: us-east-1
              associatePublicIpAddress: true
              vpcSecurityGroupIdSelector:
                matchControllerRef: true
              iamInstanceProfileSelector:
                matchControllerRef: true
              userData: |
                #!/bin/bash
                yum update -y
                yum install -y httpd
                systemctl start httpd
                systemctl enable httpd
                echo '<h1>Hello from Crossplane!</h1>' > /var/www/html/index.html
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.instanceType
          toFieldPath: spec.forProvider.instanceType
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.amiId
          toFieldPath: spec.forProvider.ami