apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: ec2-s3-composition
spec:
  compositeTypeRef:
    apiVersion: platform.example.com/v1alpha1
    kind: XEC2S3Resource
  mode: Pipeline
  pipeline:
  - step: patch-and-transform
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      # S3 Bucket
      - name: s3-bucket
        base:
          apiVersion: s3.aws.upbound.io/v1beta1
          kind: Bucket
          spec:
            forProvider:
              region: "us-east-1"
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.bucketName
          toFieldPath: metadata.name

      # Security Group 
      - name: web-security-group
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroup
          spec:
            forProvider:
              description: "Security group for web application"
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region

      - name: sg-ingress-http
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroupRule
          spec:
            forProvider:
              type: "ingress"
              protocol: "tcp"
              fromPort: 80
              toPort: 80
              cidrBlocks: ["0.0.0.0/0"]
              securityGroupIdSelector:
                matchControllerRef: true

      - name: sg-ingress-ssh
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroupRule
          spec:
            forProvider:
              type: "ingress"
              protocol: "tcp"
              fromPort: 22
              toPort: 22
              cidrBlocks: ["0.0.0.0/0"]
              securityGroupIdSelector:
                matchControllerRef: true

      - name: sg-egress-http
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroupRule
          spec:
            forProvider:
              type: "egress"
              protocol: "tcp"
              fromPort: 80
              toPort: 80
              cidrBlocks: ["0.0.0.0/0"]
              securityGroupIdSelector:
                matchControllerRef: true

      # Egress rule for HTTPS (yum repositories)
      - name: sg-egress-https
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroupRule
          spec:
            forProvider:
              type: "egress" 
              protocol: "tcp"
              fromPort: 443
              toPort: 443
              cidrBlocks: ["0.0.0.0/0"]
              securityGroupIdSelector:
                matchControllerRef: true

      - name: sg-egress-dns
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroupRule
          spec:
            forProvider:
              type: "egress"
              protocol: "udp"
              fromPort: 53
              toPort: 53
              cidrBlocks: ["0.0.0.0/0"]
              securityGroupIdSelector:
                matchControllerRef: true

      # EC2 Instance
      - name: ec2-instance
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: Instance
          spec:
            forProvider:
              instanceType: "t3.micro"
              ami: "ami-0c02fb55956c7d316"
              region: "us-east-1"
              associatePublicIpAddress: true
              vpcSecurityGroupIdSelector:
                matchControllerRef: true
              userDataReplaceOnChange: true 
              userData: |
                #!/bin/bash
                # Log everything for debugging
                exec > >(tee /var/log/user-data.log) 2>&1
                echo "UserData script started at $(date)"
                
                # Install and start httpd (this part stays the same)
                if command -v dnf &> /dev/null; then
                    echo "Detected Amazon Linux 2023 - using dnf"
                    dnf update -y
                    dnf install -y httpd awscli
                else
                    echo "Detected Amazon Linux 2 - using yum"
                    yum update -y
                    yum install -y httpd awscli
                fi
                
                systemctl start httpd
                systemctl enable httpd
                
                # Create a script that fetches content from S3
                cat > /usr/local/bin/update-webpage.sh << 'EOF'
                #!/bin/bash
                BUCKET_NAME="cross-argo-91025"
                
                # Try to download webpage from S3
                if aws s3 cp s3://${BUCKET_NAME}/website/index.html /var/www/html/index.html 2>/dev/null; then
                    echo "Downloaded webpage from S3"
                else
                    # Fallback to default webpage
                    cat > /var/www/html/index.html << 'FALLBACK'
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Crossplane Demo</title>
                    <style>
                        body { 
                            font-family: Arial, sans-serif; 
                            margin: 0; 
                            padding: 40px;
                            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                            color: white;
                            min-height: 100vh;
                        }
                        .container { 
                            background: rgba(255,255,255,0.1); 
                            padding: 40px; 
                            border-radius: 15px; 
                            text-align: center;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>ðŸŽ‰ Hello from Crossplane!</h1>
                        <p>Dynamic content loading from S3!</p>
                    </div>
                </body>
                </html>
                FALLBACK
                    echo "Used fallback webpage"
                fi
                
                # Restart httpd to ensure content is served
                systemctl reload httpd
                EOF
                
                chmod +x /usr/local/bin/update-webpage.sh
                
                # Run the script initially
                /usr/local/bin/update-webpage.sh
                
                # Set up cron job to check for updates every 5 minutes
                echo "*/5 * * * * /usr/local/bin/update-webpage.sh" | crontab -
                
                echo "UserData script completed at $(date)"
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.instanceType
          toFieldPath: spec.forProvider.instanceType
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.amiId
          toFieldPath: spec.forProvider.ami